version: "3.9"

services:

  postgres:
    image: postgres
    networks:
      - front_back
    environment:
      POSTGRES_DB: "backbase"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    # ports:
    #   - "8081:5432"

  juggler:
    build:
      context: ./juggler
      dockerfile: ./Dockerfile
    networks:
      - orchestrator_backend
      - front_back
    command: python -u -m flask run -h 0.0.0.0 -p 5001
    depends_on:
      - postgres
      - orchestrator
    # ports:
    #   - "5001:5001"
    restart: unless-stopped
    environment:
      - ORCHESTRATOR=http://orchestrator:5000
      - PASSWORD=postgres

  orchestrator:
    build:
      context: .
      dockerfile: ./orchestrator/orchestrator.Dockerfile
    networks:
      - internal_net
      - orchestrator_backend
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    command: python -u -m flask run -h 0.0.0.0 -p 5000
    environment:
      - JUGGLER=http://juggler:5001
      - PROJECT_NAME=leetforces
      - DEBUG=False
      - USE_REMOTE_IMAGE=False
      - NET_NAME=internal_net
      - IMAGE_REGISRTY=ghcr.io/nad777/codetest_bot-runner
      - CONTAINERS_MAX=5
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    command: /root/.pub-cache/bin/dhttpd --host=0.0.0.0
    ports:
      - "8080:8080"
    networks:
      - front_back

  nginx:
    image: nginx
    ports:
      - "8000:8080"
    networks:
      - front_back
    volumes:
      - type: bind
        source: ./configs/nginx.conf
        target: /etc/nginx/nginx.conf
    depends_on:
      - juggler
      - orchestrator
      - frontend


networks:
  internal_net:
  front_back:
    driver: bridge
  orchestrator_backend:
