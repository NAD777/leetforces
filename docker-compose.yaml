version: "3.9"

services:

  postgres:
    image: postgres
    networks:
      - bot_backend
    environment:
      POSTGRES_DB: "backbase"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - .:/docker-entrypoint-initdb.d

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      metrics:
      bot_backend:
      orchestrator_backend:

  grafana:
    image: grafana/grafana-oss
    volumes:
      - grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      metrics:

  juggler:
    build:
      context: ./juggler
      dockerfile: ./Dockerfile
    networks:
      - orchestrator_backend
      - bot_backend
    command: python -u -m flask run -h 0.0.0.0 -p 5001
    depends_on:
      - postgres
      - orchestrator
    ports:
      - "5001:5001"
    restart: unless-stopped
    environment:
      - ORCHESTRATOR=http://orchestrator:5000
      - BOT=http://bot:8081

  orchestrator:
    build:
      context: .
      dockerfile: ./orchestrator/orchestrator/Dockerfile
    networks: 
      - internal
      - orchestrator_backend
    command: python -u -m flask run -h 0.0.0.0 -p 5000
    depends_on:
      - test_generator
      - runner
    environment:
      - JUGGLER=http://juggler:5001
    restart: unless-stopped

  runner:
    build:
      dockerfile: ./orchestrator/runners/Dockerfile
      context: .
    networks: 
      - internal
    command: python -u runner.py
    depends_on:
      - test_generator
    restart: unless-stopped

  test_generator:
    build:
      dockerfile: ./orchestrator/runners/Dockerfile
      context: .
    networks: 
      - internal
    command: python -u runner.py
    restart: unless-stopped

  bot:
    build:
      context: ./bot
      dockerfile: ./Dockerfile
    ports:
      - "8081:8081"
      - "8082:8082"
    restart: unless-stopped
    networks:
      - bot_backend
    depends_on:
      - juggler
    env_file:
      - ./bot/env.properties

networks:
  internal:
  bot_backend:
  orchestrator_backend:
  metrics:

volumes:
  prometheus:
  grafana:
