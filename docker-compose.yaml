version: "3.9"

services:

  postgres:
    image: postgres
    networks:
      - bot_backend
    environment:
      POSTGRES_DB: "backbase"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    ports:
      - "8081:5432"

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   ports:
  #     - "9090:9090"
  #   restart: unless-stopped
  #   networks:
  #     metrics:
  #     bot_backend:
  #     orchestrator_backend:

  # grafana:
  #   image: grafana/grafana-oss
  #   volumes:
  #     - grafana:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #   restart: unless-stopped
  #   networks:
  #     metrics:

  juggler:
    build:
      context: ./juggler
      dockerfile: ./Dockerfile
    networks:
      - orchestrator_backend
      - bot_backend
    command: python -u -m flask run -h 0.0.0.0 -p 5001
    depends_on:
      - postgres
      - orchestrator
    ports:
      - "5001:5001"
    restart: unless-stopped
    environment:
      - ORCHESTRATOR=http://orchestrator:5000
      - BOT=http://bot:8081
      - PASSWORD=postgres

  orchestrator:
    build:
      context: .
      dockerfile: ./orchestrator/orchestrator.Dockerfile
    networks:
      - internal_net
      - orchestrator_backend
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    command: python -u -m flask run -h 0.0.0.0 -p 5000
    environment:
      - JUGGLER=http://juggler:5001
      - PROJECT_NAME=leetforces
      - DEBUG=False
      - USE_REMOTE_IMAGE=False
      - NET_NAME=internal_net
      - IMAGE_REGISRTY=ghcr.io/nad777/codetest_bot-runner
      - CONTAINERS_MAX=5
    restart: unless-stopped

  # bot:
  #   build:
  #     context: ./bot
  #     dockerfile: ./Dockerfile
  #   ports:
  #     - "8081:8081"
  #     - "8082:8082"
  #   restart: unless-stopped
  #   networks:
  #     - bot_backend
  #   depends_on:
  #     - juggler
  #   env_file:
  #     - ./bot/env.properties

networks:
  internal_net:
  bot_backend:
    driver: bridge
  orchestrator_backend:
  # metrics:

# volumes:
#   prometheus:
#   grafana:
